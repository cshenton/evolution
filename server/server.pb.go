// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Agent
	Result
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Agent is a self describing message containing the data required to construct
// a concrete type that fulfills the Agent interface.
type Agent struct {
	Message *google_protobuf.Any `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Agent) GetMessage() *google_protobuf.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

// Result contains the fitness of a perturbation, and the seed used to generate it.
type Result struct {
	Seed    int64   `protobuf:"varint,1,opt,name=seed" json:"seed,omitempty"`
	Fitness float64 `protobuf:"fixed64,2,opt,name=fitness" json:"fitness,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *Result) GetFitness() float64 {
	if m != nil {
		return m.Fitness
	}
	return 0
}

func init() {
	proto.RegisterType((*Agent)(nil), "evolution.server.Agent")
	proto.RegisterType((*Result)(nil), "evolution.server.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Evolution service

type EvolutionClient interface {
	// Join returns the server's current MLP, used to bootstrap new servers.
	Join(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Agent, error)
	// Notify tells the server about a new result.
	Notify(ctx context.Context, in *Result, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type evolutionClient struct {
	cc *grpc.ClientConn
}

func NewEvolutionClient(cc *grpc.ClientConn) EvolutionClient {
	return &evolutionClient{cc}
}

func (c *evolutionClient) Join(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/evolution.server.Evolution/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evolutionClient) Notify(ctx context.Context, in *Result, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/evolution.server.Evolution/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Evolution service

type EvolutionServer interface {
	// Join returns the server's current MLP, used to bootstrap new servers.
	Join(context.Context, *google_protobuf1.Empty) (*Agent, error)
	// Notify tells the server about a new result.
	Notify(context.Context, *Result) (*google_protobuf1.Empty, error)
}

func RegisterEvolutionServer(s *grpc.Server, srv EvolutionServer) {
	s.RegisterService(&_Evolution_serviceDesc, srv)
}

func _Evolution_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvolutionServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evolution.server.Evolution/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvolutionServer).Join(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evolution_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvolutionServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evolution.server.Evolution/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvolutionServer).Notify(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

var _Evolution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evolution.server.Evolution",
	HandlerType: (*EvolutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Evolution_Join_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Evolution_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x8f, 0xb1, 0x4b, 0x03, 0x31,
	0x14, 0xc6, 0x1b, 0xad, 0x57, 0x7d, 0x3a, 0xc8, 0x43, 0xf4, 0x3c, 0x97, 0x72, 0x53, 0xa7, 0x57,
	0xa8, 0xa0, 0x08, 0x2e, 0x15, 0xba, 0x38, 0x38, 0x64, 0x74, 0x6b, 0xf1, 0x5d, 0x08, 0x5c, 0xf3,
	0xca, 0x25, 0x57, 0xb8, 0xdd, 0x3f, 0x5c, 0x4c, 0xcc, 0xd2, 0xe2, 0x96, 0xe4, 0xfb, 0xbd, 0x2f,
	0xbf, 0x07, 0x57, 0x9e, 0xbb, 0x3d, 0x77, 0xb4, 0xeb, 0x24, 0x08, 0x5e, 0xf3, 0x5e, 0xda, 0x3e,
	0x58, 0x71, 0x94, 0xde, 0xab, 0x7b, 0x23, 0x62, 0x5a, 0x9e, 0xc7, 0x7c, 0xd3, 0x37, 0xf3, 0xb5,
	0x1b, 0x12, 0x5c, 0x3d, 0x1c, 0x46, 0xbc, 0xdd, 0x85, 0xbf, 0xb0, 0x7e, 0x86, 0xb3, 0xa5, 0x61,
	0x17, 0x90, 0x60, 0xb2, 0x65, 0xef, 0xd7, 0x86, 0xcb, 0x93, 0xa9, 0x9a, 0x5d, 0x2e, 0x6e, 0x28,
	0xcd, 0x51, 0x9e, 0xa3, 0xa5, 0x1b, 0x74, 0x86, 0xea, 0x27, 0x28, 0x34, 0xfb, 0xbe, 0x0d, 0x88,
	0x30, 0xf6, 0xcc, 0x5f, 0xa5, 0x9a, 0xaa, 0xd9, 0xa9, 0x8e, 0x67, 0x2c, 0x61, 0xd2, 0xd8, 0xe0,
	0xd8, 0xfb, 0xd8, 0xa6, 0x74, 0xbe, 0x2e, 0xbe, 0x15, 0x5c, 0xac, 0xb2, 0x3d, 0xbe, 0xc0, 0xf8,
	0x5d, 0xac, 0xc3, 0xdb, 0xa3, 0xcf, 0x56, 0xbf, 0x92, 0xd5, 0x1d, 0x1d, 0x6e, 0x4a, 0x51, 0xb7,
	0x1e, 0xe1, 0x2b, 0x14, 0x1f, 0x12, 0x6c, 0x33, 0x60, 0x79, 0x0c, 0x25, 0xb5, 0xea, 0x9f, 0xda,
	0x7a, 0xf4, 0x76, 0xfe, 0x59, 0x24, 0x74, 0x53, 0xc4, 0xec, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x3d, 0xfb, 0x0f, 0xde, 0x62, 0x01, 0x00, 0x00,
}
