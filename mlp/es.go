package mlp

import "math/rand"

var scale = 1.0
var rate = 1.0e-6

// Rand deterministically generates a slice p of parameter perturbations
// of length n using random seed s.
func Rand(s int64, n int) (p []float64) {
	p = make([]float64, n)

	r := rand.New(rand.NewSource(s))
	for i := range p {
		p[i] = r.NormFloat64() * scale
	}
	return p
}

// Perturb adds random noise to the MLP weights given the provided random seed.
func (m *MLP) Perturb(s int64) {
	p := Rand(s, len(m.Weights))
	for i := range p {
		m.Weights[i] += p[i]
	}
}

// Update applies a gradient update to the MLP weights given a random seed and
// the evaluated fitness of the parameter perturbation generated by the seed.
func (m *MLP) Update(s int64, f float64) {
	p := Rand(s, len(m.Weights))
	for i := range p {
		m.Weights[i] += rate * p[i] * f / scale
	}
}
