// Code generated by protoc-gen-go. DO NOT EDIT.
// source: swarm.proto

/*
Package swarm is a generated protocol buffer package.

It is generated from these files:
	swarm.proto

It has these top-level messages:
	MLP
	Result
*/
package swarm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Activation is a valid activation function
type Activation int32

const (
	Activation_IDENTITY Activation = 0
	Activation_TANH     Activation = 1
	Activation_RELU     Activation = 2
)

var Activation_name = map[int32]string{
	0: "IDENTITY",
	1: "TANH",
	2: "RELU",
}
var Activation_value = map[string]int32{
	"IDENTITY": 0,
	"TANH":     1,
	"RELU":     2,
}

func (x Activation) String() string {
	return proto.EnumName(Activation_name, int32(x))
}
func (Activation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// MLP contains the weights and specification for a multi-layer perceptron.
type MLP struct {
	Sizes       []int32      `protobuf:"varint,1,rep,packed,name=sizes" json:"sizes,omitempty"`
	Activations []Activation `protobuf:"varint,2,rep,packed,name=activations,enum=swarm.Activation" json:"activations,omitempty"`
	Weights     []float64    `protobuf:"fixed64,3,rep,packed,name=weights" json:"weights,omitempty"`
}

func (m *MLP) Reset()                    { *m = MLP{} }
func (m *MLP) String() string            { return proto.CompactTextString(m) }
func (*MLP) ProtoMessage()               {}
func (*MLP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MLP) GetSizes() []int32 {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *MLP) GetActivations() []Activation {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *MLP) GetWeights() []float64 {
	if m != nil {
		return m.Weights
	}
	return nil
}

// Result contains the fitness of a perturbation, and the seed used to generate it.
type Result struct {
	Seed    int64   `protobuf:"varint,1,opt,name=seed" json:"seed,omitempty"`
	Fitness float64 `protobuf:"fixed64,2,opt,name=fitness" json:"fitness,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *Result) GetFitness() float64 {
	if m != nil {
		return m.Fitness
	}
	return 0
}

func init() {
	proto.RegisterType((*MLP)(nil), "swarm.MLP")
	proto.RegisterType((*Result)(nil), "swarm.Result")
	proto.RegisterEnum("swarm.Activation", Activation_name, Activation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swarm service

type SwarmClient interface {
	// Join returns the server's current MLP, used to bootstrap new servers.
	Join(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*MLP, error)
	// Notify tells the server about a new result.
	Notify(ctx context.Context, in *Result, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) Join(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*MLP, error) {
	out := new(MLP)
	err := grpc.Invoke(ctx, "/swarm.Swarm/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) Notify(ctx context.Context, in *Result, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/swarm.Swarm/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Swarm service

type SwarmServer interface {
	// Join returns the server's current MLP, used to bootstrap new servers.
	Join(context.Context, *google_protobuf.Empty) (*MLP, error)
	// Notify tells the server about a new result.
	Notify(context.Context, *Result) (*google_protobuf.Empty, error)
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarm.Swarm/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Join(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swarm_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarm.Swarm/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Notify(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swarm.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Swarm_Join_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Swarm_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swarm.proto",
}

func init() { proto.RegisterFile("swarm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x97, 0x65, 0x9d, 0xe3, 0x4d, 0x65, 0x3e, 0x44, 0x4a, 0xbd, 0x94, 0x9e, 0x8a, 0x48,
	0x86, 0x1b, 0x78, 0x1f, 0x58, 0x70, 0xd2, 0x95, 0x11, 0xeb, 0xc1, 0x63, 0xa7, 0x69, 0x17, 0xd9,
	0x9a, 0xb1, 0x64, 0x8e, 0xf9, 0xd7, 0x4b, 0xda, 0x4e, 0xbd, 0x78, 0x7b, 0xbf, 0x2f, 0xef, 0xe3,
	0x7b, 0xf9, 0xa0, 0xaf, 0xf7, 0xd9, 0x76, 0xcd, 0x36, 0x5b, 0x65, 0x14, 0x3a, 0x15, 0x78, 0xd7,
	0x85, 0x52, 0xc5, 0x4a, 0x0c, 0x2b, 0x71, 0xb1, 0xcb, 0x87, 0x62, 0xbd, 0x31, 0x87, 0x7a, 0x27,
	0xf8, 0x00, 0x3a, 0x8b, 0xe7, 0x78, 0x09, 0x8e, 0x96, 0x5f, 0x42, 0xbb, 0xc4, 0xa7, 0xa1, 0xc3,
	0x6b, 0xc0, 0x31, 0xf4, 0xb3, 0x37, 0x23, 0x3f, 0x33, 0x23, 0x55, 0xa9, 0xdd, 0xb6, 0x4f, 0xc3,
	0xf3, 0xd1, 0x05, 0xab, 0x33, 0x26, 0x3f, 0x2f, 0xfc, 0xef, 0x16, 0xba, 0x70, 0xb2, 0x17, 0xb2,
	0x58, 0x1a, 0xed, 0x52, 0x9f, 0x86, 0x84, 0x1f, 0x31, 0xb8, 0x87, 0x2e, 0x17, 0x7a, 0xb7, 0x32,
	0x88, 0xd0, 0xd1, 0x42, 0xbc, 0xbb, 0xc4, 0x27, 0x21, 0xe5, 0xd5, 0x6c, 0x7d, 0xb9, 0x34, 0xa5,
	0xd0, 0x36, 0x88, 0x58, 0x5f, 0x83, 0x37, 0x0c, 0xe0, 0x37, 0x0c, 0x4f, 0xa1, 0x37, 0x7d, 0x88,
	0x92, 0x74, 0x9a, 0xbe, 0x0e, 0x5a, 0xd8, 0x83, 0x4e, 0x3a, 0x49, 0x1e, 0x07, 0xc4, 0x4e, 0x3c,
	0x8a, 0x5f, 0x06, 0xed, 0xd1, 0x12, 0x9c, 0x67, 0x7b, 0x22, 0xde, 0x42, 0xe7, 0x49, 0xc9, 0x12,
	0xaf, 0x58, 0x5d, 0x01, 0x3b, 0x56, 0xc0, 0x22, 0x5b, 0x81, 0x07, 0xcd, 0x57, 0x66, 0xf1, 0x3c,
	0x68, 0xe1, 0x1d, 0x74, 0x13, 0x65, 0x64, 0x7e, 0xc0, 0xb3, 0x46, 0xaf, 0xaf, 0xf5, 0xfe, 0xb1,
	0x07, 0xad, 0x45, 0xb7, 0x52, 0xc6, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x0e, 0xf3, 0x69,
	0x77, 0x01, 0x00, 0x00,
}
